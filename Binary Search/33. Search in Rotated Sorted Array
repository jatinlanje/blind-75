class Solution {
    public int search(int[] nums, int target) {
        int n=nums.length;
        int pivot = pivot(nums);

        if(pivot == -1){ 
            return binarySearch(nums, 0, n-1, target);
        }

        if(target < nums[0]){ //search on right part
            return binarySearch(nums, pivot, n-1, target);
        }

        else if(target >= nums[0]){ //search on left part
            return binarySearch(nums, 0, pivot-1, target);
        }

        return -1;
    }

    public int pivot(int nums[]){ //samllest value index
        int pivot = -1;
        int left = 0;
        int right = nums.length-1;
        
        while(left <= right){ 
            int mid = (left + right)/2;
            if(nums[mid] >= nums[0]){
                //mid is in 1st part
                //move to right because elements of 1st part is greater than second part
                left = mid + 1;
            }
            else if(nums[mid]<nums[0]){
                //mid is in 2nd part
                pivot = mid; //can be the possible smallest value index
                //move to left in 2nd part itself 
                //because 2nd part of array is also sorted so the smaller elements will lie of left side
                right = mid-1;
            }
        }
        return pivot;
    }

    public int binarySearch(int nums[], int left, int right, int target){
        int l = left;
        int r = right;

        while(l <= r) {
            int mid = (l + r)/2;
            if (nums[mid] == target) { 
                return mid;
            } else if (nums[mid] < target) {
                l = mid + 1; 
            } else { 
                r = mid - 1; 
            }
        }
        return -1;
    }
}
