class Solution {
    static TreeNode buildTree(int[] preorder, int[] inorder) {
    Map<Integer,Integer> inMap=new HashMap<>(); //element,index
    for (int i=0; i<inorder.length; i++){
      inMap.put(inorder[i], i);
    }
    TreeNode root = buildTree(preorder, 0, preorder.length - 1, inorder, 0, 
    inorder.length - 1, inMap);
    return root;
    }

    static TreeNode buildTree(int[] preorder, int preOrderStart, int preOrderEnd, int[]
    inorder, int inOrderStart, int inOrderEnd, Map < Integer, Integer > inMap){
    if (preOrderStart > preOrderEnd || inOrderStart > inOrderEnd) return null;

    TreeNode root = new TreeNode(preorder[preOrderStart]);
    int inOrderRoot = inMap.get(root.val); //index
    int elementsOfLeft = inOrderRoot - inOrderStart;

    root.left = buildTree(preorder, preOrderStart + 1, preOrderStart + elementsOfLeft, inorder, 
    inOrderStart, inOrderRoot - 1, inMap);
    root.right = buildTree(preorder, preOrderStart + elementsOfLeft + 1, preOrderEnd, inorder, 
    inOrderRoot + 1, inOrderEnd, inMap);

    return root;
  }
}
