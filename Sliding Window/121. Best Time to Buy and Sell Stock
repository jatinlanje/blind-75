class Solution {
    public int maxProfit(int[] prices) {
        int left = 0;
        int right = 0;
        int max = 0;
        if (prices == null || prices.length < 2) {
            return 0;
        }
        while (right < prices.length) {
            if (prices[right] > prices[left]) {
                max=Math.max(prices[right] - prices[left],max);
            } else {
                left = right;
            }
            right++;
        }
        return max;
    }
}

class Solution {
    public int maxProfit(int[] prices) {
        int n=prices.length;
        int minPrice=Integer.MAX_VALUE;
        int maxPrice=0;
        for(int i=0; i<n; i++){
            if(prices[i]<minPrice){
                minPrice=prices[i];
            }
            maxPrice=Math.max(prices[i]-minPrice,maxPrice);
        }
        return maxPrice;
    }
}
